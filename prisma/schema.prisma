// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  book             Book[]
  independentNotes IndependentNotes[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id             String           @id @default(cuid())
  name           String
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  chaptersverses ChaptersVerses[]
  notes Notes[]

  user User                       @relation(fields: [userId], references: [id] )
}

model ChaptersVerses {
  id        String   @id @default(cuid())
  chapter   String
  verses    String?
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Notes[]

  book Book          @relation(fields: [bookId], references: [id])
}

model Notes {
  id               String       @id @default(cuid())
  text             String       @db.LongText
  bookId           String
  chaptersversesId String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  book Book                     @relation(fields: [bookId], references: [id])
  chaptersVerses ChaptersVerses @relation(fields: [chaptersversesId], references: [id])
}

model IndependentNotes {
  id               String   @id @default(cuid())
  userId           String
  title            String
  text             String   @db.LongText
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User        @relation(fields: [userId], references: [id] )
}